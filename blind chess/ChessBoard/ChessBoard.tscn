[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

var BoardPosition = []

# Black pieces
var e = 'e'
var k = 'k'
var r = 'r'
var n = 'n'
var b = 'b'
var q = 'q'
var p = 'p'

# White pieces
var K = 'K'
var R = 'R'
var N = 'N'
var B = 'B'
var Q = 'Q'
var P = 'P'

var color = 0
var position = [0,0]
var movelist = []
var movestring = ''
var stringlist = ''
var whitelocations = []
var blacklocations = []
var enemielist = []
var friendlist = []
var allmovelist = []
var startmoveid = 0
var endmoveid = 0
var startmovefile = 0
var startmoverank = 0
var endmovefile = 0
var endmoverank = 0
var passantsquare = []
#1 if castling is allowed 0 if it isnt. from left to right its white queenside castling white kingside castling black queenside castling black kingside castling
var castlingrights = '0000'
#1 if piece hasnt moved 0 if it has. order is (L,R = left,right r,k = rook,king wb = white or black) Lwr Lbr wk bk Rwr Rbr 
var kingandrookmove = '111111'
var castlingmove = []

func locations(BoardPosition):
	
	blacklocations = []
	whitelocations = []
	allmovelist = []
	
	
	for i in 64:
		
		position[0] = 1+(i)%8
		position[1] = 1+i/8
		
		
		if BoardPosition[i] != 'e':
			if BoardPosition[i] == BoardPosition[i].to_upper():
				whitelocations.append(position.duplicate())
			else:
				blacklocations.append(position.duplicate())
				
	

func checkBoardPosition(BoardPosition):
	
	if turn_step%2 == 0:
		color = 'Black'
	else:
		color = 'White'
	
	for i in 64:
		
		position[0] = 1+(i)%8
		position[1] = 1+i/8
		
		if color == 'White':
			match(BoardPosition[i]):
				R:
					checkrook(position,color)
					allmovelist.append(movelist)
					
				B:
					checkbishop(position,color)
					allmovelist.append(movelist)
				N:
					checkknight(position,color)
					allmovelist.append(movelist)
				K:
					checkking(position,color)
					allmovelist.append(movelist)
				P:
					checkpawn(position,color, passantsquare)
					allmovelist.append(movelist)
				Q:
					checkqueen(position,color)
					allmovelist.append(movelist)
		else:
			match(BoardPosition[i]):
				r:
					checkrook(position,color)
					allmovelist.append(movelist)
				b:
					checkbishop(position,color)
					allmovelist.append(movelist)
				n:
					checkknight(position,color)
					allmovelist.append(movelist)
				k:
					checkking(position,color)
					allmovelist.append(movelist)
				p:
					checkpawn(position,color, passantsquare)
					allmovelist.append(movelist)
				q:
					checkqueen(position,color)
					allmovelist.append(movelist)

		
		
		




func checkking(position, color):
	movelist = []
	
	
	if color == 'White':
		enemielist = blacklocations
		friendlist = whitelocations
	else:
		enemielist = whitelocations
		friendlist = blacklocations
	
	var targets = [[1,1],[1,-1],[1,0],[0,-1],[0,1],[-1,-1],[-1,1],[-1,0]]
	
	for i in (8):
		var target = [position[0] + targets[i][0], position[1] + targets[i][1]]
		if friendlist.has(target) == false and target[0] <= 8 and target[0] >=1 and target[1] <= 8 and target[1] >= 1:
			movestring = str(position[0],position[1], target[0],target[1])
			movelist.append(movestring)
	
	return movelist

func checkrook(position, color):
	movelist = []
	
	if color == 'White':
		enemielist = blacklocations
		friendlist = whitelocations
	else:
		enemielist = whitelocations
		friendlist = blacklocations
	
	
	
	for i in 4: # up, down, right, left,
	
		var path = true
		var chain = 1
		var x = 0
		var y = 0
		
		
		match i:
			0:
				x = 0
				y = 1
			1:
				x = 0
				y = -1
			2:
				x = 1
				y = 0
			3:
				x = -1
				y = 0
		while path:
			if not [position[0]+(chain*x), position[1] + (chain*y)] in friendlist and int(position[0]+(chain*x)) <= 8 and int(position[0]+(chain*x) >=1) and 1 <=  int(position[1] + (chain*y)) and int(position[1] + (chain*y)) <= 8:
				movestring = (str(position[0],position[1],position[0]+(chain*x),position[1]+(chain*y)))
				movelist.append(movestring)
				
				if ([position[0]+(chain*x), position[1] + (chain*y)] in enemielist) == true: 
					path = false
				chain += 1
			else:
				path = false
	
	return movelist

func checkknight(position, color):
	movelist = []
	
	
	if (color == 'White'):
		enemielist = blacklocations
		friendlist = whitelocations
	else:
		enemielist = whitelocations
		friendlist = blacklocations
	
	var targets = [[1,2],[1,-2],[2,1],[2,-1],[-1,2],[-1,-2],[-2,1],[-2,-1]]
	
	for i in (8):
		var target = [position[0] + targets[i][0], position[1] + targets[i][1]]
		if friendlist.has(target) == false and target[0] <= 8 and target[0] >=1 and target[1] <= 8 and target[1] >= 1:
			movestring = str(position[0],position[1], target[0],target[1])
			movelist.append(movestring)
			
		
		
	return movelist

func checkbishop(position, color):
	movelist = []
	
	
	if color == 'White':
		enemielist = blacklocations
		friendlist = whitelocations
	else:
		enemielist = whitelocations
		friendlist = blacklocations
	
	
	
	for i in range(4): # up-right, up-left, down-right, down-left,
		
		var path = true
		var chain = 1
		var x = 0
		var y = 0
		
		match i:
			0:
				x = 1
				y = 1
			1:
				x = 1
				y = -1
			2:
				x = -1
				y = 1
			3:
				x = -1
				y = -1
		
		while path:
			if not [position[0]+(chain*x), position[1] + (chain*y)] in friendlist and int(position[0]+(chain*x)) <= 8 and int(position[0]+(chain*x) >=1) and 1 <=  int(position[1] + (chain*y)) and int(position[1] + (chain*y)) <= 8:
				movestring = (str(position[0],position[1],position[0]+(chain*x),position[1]+(chain*y)))
				movelist.append(movestring)
				
				if ([position[0]+(chain*x), position[1] + (chain*y)] in enemielist) == true: 
					path = false
				chain += 1
			else:
				path = false
	
	
	return movelist

func checkqueen(position, color):
	 
	movelist = []
	
	movelist = checkbishop(position, color)
	var secondmovelist = checkrook(position, color)

	movelist.append_array(secondmovelist)
	
	
	return movelist

func checkpawn(position, color, passantsquare):
	movelist = []
	
	if color == 'White':
		if not ([position[0], position[1]+1]) in whitelocations and (not ([position[0], position[1]+1]) in blacklocations) and position[1] < 8:
			movestring = str(position[0],position[1],position[0],position[1]+1)
			movelist.append(movestring)
			if not ([position[0], position[1]+2]) in whitelocations and (not ([position[0], position[1]+2]) in blacklocations) and position[1] == 2:
				movestring = str(position[0],position[1],position[0],position[1]+2)
				movelist.append(movestring)
		if  ([position[0]+1, position[1]+1]) in blacklocations or str([position[0]+1, position[1]+1]) == str(passantsquare):
			movestring = str(position[0],position[1],position[0]+1,position[1]+1)
			movelist.append(movestring)
		if  ([position[0]-1, position[1]+1]) in blacklocations or str([position[0]-1, position[1]+1]) == str(passantsquare):
			movestring = str(position[0],position[1],position[0]-1,position[1]+1)
			movelist.append(movestring)

	else:
		if not ([position[0], position[1]-1]) in whitelocations and (not ([position[0], position[1]-1]) in blacklocations) and position[1] < 8:
			movestring = str(position[0],position[1],position[0],position[1]-1)
			movelist.append(movestring)
			if not ([position[0], position[1]-2]) in whitelocations and (not ([position[0], position[1]-2]) in blacklocations) and position[1] == 7:
				movestring = str(position[0],position[1],position[0],position[1]-2)
				movelist.append(movestring)
		if  ([position[0]+1, position[1]-1]) in whitelocations or ([position[0]+1, position[1]-1]) in passantsquare:
			movestring = str(position[0],position[1],position[0]+1,position[1]-1)
			movelist.append(movestring)
		if  ([position[0]-1, position[1]-1]) in whitelocations or ([position[0]-1, position[1]-1]) in passantsquare:
			movestring = str(position[0],position[1],position[0]-1,position[1]-1)
			movelist.append(movestring)
	return movelist



var move = ''

#Fen string for starting position
var fen = 'RNBQKBNR/PPPPPPPP/8/8/8/8/pppppppp/rnbqkbnr'
var turn_step = 0

#turns fenstring into a string able to be put into action
func TranslateFen():
	fen = fen.replace('/', '')

	fen = fen.replace('1', 'e')
	fen = fen.replace('2', 'ee')
	fen = fen.replace('3', 'eee')
	fen = fen.replace('4', 'eeee')
	fen = fen.replace('5', 'eeeee')
	fen = fen.replace('6', 'eeeeee')
	fen = fen.replace('7', 'eeeeeee')
	fen = fen.replace('8', 'eeeeeeee')
	

func TranslateMove():
	move = move.replace('a','1')
	move = move.replace('b','2')
	move = move.replace('c','3')
	move = move.replace('d','4')
	move = move.replace('e','5')
	move = move.replace('f','6')
	move = move.replace('g','7')
	move = move.replace('h','8')
	return move



func startmoveid():
	startmoverank = int(move[1])
	startmovefile = int(move[0])
	endmoverank = int(move[3])
	endmovefile = int(move[2])
	startmoveid = startmovefile
	while startmoveid < 64:
		
		
		
		if startmoveid < startmoverank*8 and startmoveid >= (startmoverank-1)*8:
			startmoveid-=1
			
			return int(startmoveid)
		startmoveid += 8

func endmoveid():
	startmoverank = int(move[1])
	startmovefile = int(move[0])
	endmoverank = int(move[3])
	endmovefile = int(move[2])
	endmoveid = endmovefile
	while endmoveid < 64:
		
		
		
		if endmoveid < endmoverank*8 and endmoveid >= (endmoverank-1)*8:
			endmoveid-=1
			return int(endmoveid)
		endmoveid += 8

func checkep():
	
	if BoardPosition[endmoveid] != p and BoardPosition[endmoveid] != P:
		passantsquare = []
		return passantsquare
		
	else:
		if int(move[1])+2 == int(move[3]):
			passantsquare = [move[0],int(move[3])-1]
			return passantsquare
			
		
		elif int(move[1])-2 == int(move[3]):
			passantsquare = [move[0],int(move[3])+1]
			return passantsquare
			
		else:
			passantsquare = []
			return passantsquare

func MakeMove(BoardPosition):
	if move[3] != null:
		
		if move in castlingmove:
			if move == '5171' and color == 'White':
				BoardPosition[6] = 'K'
				BoardPosition[5] = 'R'
				BoardPosition[7] = 'e'
				BoardPosition[4] = 'e'
				while '5171' in castlingmove:
					castlingmove.erase('5171')
			elif move == '5131' and color == 'White':
				BoardPosition[2] = 'K'
				BoardPosition[3] = 'R'
				BoardPosition[0] = 'e'
				BoardPosition[4] = 'e'
				while '5131' in castlingmove:
					castlingmove.erase('5131')
			elif move == '5878' and color == 'Black':
				BoardPosition[62] = 'K'
				BoardPosition[61] = 'R'
				BoardPosition[63] = 'e'
				BoardPosition[60] = 'e'
				while '5878' in castlingmove:
					castlingmove.erase('5878')
			elif move == '5838' and color == 'Black':
				BoardPosition[58] = 'K'
				BoardPosition[59] = 'R'
				BoardPosition[56] = 'e'
				BoardPosition[60] = 'e'
				while '5838' in castlingmove:
					castlingmove.erase('5838')
		else:
			allmovelist = str(allmovelist)
			if TranslateMove() in allmovelist:
				
				
				
				endmoveid()
				startmoveid()
				BoardPosition[endmoveid()] = BoardPosition[startmoveid()]
				BoardPosition[startmoveid()] = 'e'
				
			
			
			else:
				print('you done messed up aaron')
	

func castling():
	
	
	print(startmoveid())
	print(endmoveid())
	print(move)
	
	if startmoveid() == 0:
		kingandrookmove[0] = '0'
	elif startmoveid() == 4:
		kingandrookmove[2] = '0'
	elif startmoveid() == 7:
		kingandrookmove[4] = '0'
	elif startmoveid() == 56:
		kingandrookmove[1] = '0'
	elif startmoveid() == 60:
		kingandrookmove[3] = '0'
	elif startmoveid() == 63:
		kingandrookmove[5] = '0'
	

	if BoardPosition[1] == 'e' and BoardPosition[2] == 'e' and BoardPosition[3] == 'e' and int(kingandrookmove[0]) == 1 and int(kingandrookmove[2]) == 1:
		castlingrights[0] = '1'
	if BoardPosition[5] == 'e' and BoardPosition[6] == 'e' and int(kingandrookmove[4]) == 1 and int(kingandrookmove[2]) == 1:
		castlingrights[1] = '1'
	if BoardPosition[57] == 'e' and BoardPosition[58] == 'e' and BoardPosition[59] == 'e' and int(kingandrookmove[1]) == 1 and int(kingandrookmove[3]) == 1:
		castlingrights[2] = '1'
	if BoardPosition[61] == 'e' and BoardPosition[62] == 'e' and int(kingandrookmove[5]) == 1 and int(kingandrookmove[3]) == 1:
		castlingrights[3] = '1'

func performcastling():
	
	for i in 4:
		
		
		if int(castlingrights[i]) == 0:
			match i:
				0:
					while '5131' in castlingmove:
						castlingmove.erase('5131')
				1:
					while '5171' in castlingmove:
						castlingmove.erase('5171')
				2:
					while '5838' in castlingmove:
						castlingmove.erase('5838')
				3:
					while '5878' in castlingmove:
						castlingmove.erase('5878')
		else:
			match i:
				0:
					castlingmove.append('5131')
				1:
					castlingmove.append('5171')
				2:
					castlingmove.append('5838')
				3:
					castlingmove.append('5878')
		
		
		

#ready function
func _ready():
	
	
	for i in range(64):
		BoardPosition.append(0)
		
	TranslateFen()
	
	for i in range(64):
		BoardPosition[i] = fen[i]
	
	print(BoardPosition)


func _on_LineEdit_text_entered(new_text):
	
	move = new_text
	turn_step += 1
	
	locations(BoardPosition)
	checkBoardPosition(BoardPosition)
	TranslateMove()
	castling()
	performcastling()
	allmovelist.append(castlingmove)
	print(castlingmove,castlingrights)
	MakeMove(BoardPosition)
	passantsquare = checkep()
	print(BoardPosition)
	
	
	for i in 4:
		
		
		if int(castlingrights[i]) == 0:
			match i:
				0:
					while '5131' in castlingmove:
						castlingmove.erase('5131')
				1:
					while '5171' in castlingmove:
						castlingmove.erase('5171')
				2: 
					while '5838' in castlingmove:
						castlingmove.erase('5838')
				3:
					while '5878' in castlingmove:
						castlingmove.erase('5878')

"

[node name="ChessBoard" type="Node"]
script = SubResource( 1 )

[node name="LineEdit" type="LineEdit" parent="."]
anchor_left = 0.065
anchor_top = 0.592
anchor_right = 0.893
anchor_bottom = 0.927
margin_left = 0.439995
margin_top = -0.200012
margin_right = -0.432068
margin_bottom = -0.200012
clear_button_enabled = true

[connection signal="text_entered" from="LineEdit" to="." method="_on_LineEdit_text_entered"]
